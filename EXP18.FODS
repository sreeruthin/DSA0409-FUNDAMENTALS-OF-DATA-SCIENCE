import statsmodels.api as sm

# Data for Age and %Fat
data = {'Age': [23, 23, 23, 27, 27, 39, 41, 47, 49, 50, 52, 54, 54, 56, 57, 58, 60, 61],
        'PercentFat': [9.5, 26.5, 7.8, 17.8, 31.4, 25.9, 27.4, 27.2, 31.2, 34.6, 42.5, 28.8, 33.4, 30.2, 34.1, 32.9, 41.2, 35.7]}
df = pd.DataFrame(data)

# Calculate mean, median and standard deviation
print("Mean of Age:", df['Age'].mean())
print("Median of Age:", df['Age'].median())
print("Standard Deviation of Age:", df['Age'].std())

print("\nMean of %Fat:", df['PercentFat'].mean())
print("Median of %Fat:", df['PercentFat'].median())
print("Standard Deviation of %Fat:", df['PercentFat'].std())

# Draw boxplots
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
df.boxplot(column='Age')
plt.title('Boxplot of Age')

plt.subplot(1, 2, 2)
df.boxplot(column='PercentFat')
plt.title('Boxplot of %Fat')
plt.tight_layout()
plt.show()

# Draw a scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df['Age'], df['PercentFat'])
plt.xlabel('Age')
plt.ylabel('%Fat')
plt.title('Scatter Plot of Age vs %Fat')
plt.grid(True)
plt.show()

# Draw a q-q plot
sm.qqplot(df['Age'], line='s')
plt.title('Q-Q Plot of Age')
plt.show()

sm.qqplot(df['PercentFat'], line='s')
plt.title('Q-Q Plot of %Fat')
plt.show()
