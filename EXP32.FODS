

import matplotlib.pyplot as plt
import numpy as np
!pip install scikit-learn
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Create a sample dataset (replace with your actual data loading)
data = {'Size': [1000, 1200, 1500, 1800, 2000, 2200, 2500, 2800, 3000, 3500],
        'Price': [200000, 230000, 280000, 320000, 350000, 380000, 420000, 450000, 480000, 550000]}
df = pd.DataFrame(data)

# Bivariate Analysis: Scatter plot of Size vs Price
plt.figure(figsize=(8, 6))
plt.scatter(df['Size'], df['Price'])
plt.title('House Size vs Price')
plt.xlabel('House Size (sq ft)')
plt.ylabel('Price ($)')
plt.grid(True)
plt.show()

# Prepare data for Linear Regression
X = df[['Size']] # Independent variable (feature)
y = df['Price'] # Dependent variable (target)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse:.2f}')
print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')
print(f'R-squared (R2): {r2:.2f}')

# Plot the regression line
plt.figure(figsize=(8, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual Price')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted Price')
plt.title('Linear Regression: House Size vs Price')
plt.xlabel('House Size (sq ft)')
plt.ylabel('Price ($)')
plt.legend()
plt.grid(True)
plt.show()

# Print the model coefficients
print(f'Intercept: {model.intercept_:.2f}')
print(f'Coefficient for Size: {model.coef_[0]:.2f}')
