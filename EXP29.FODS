!pip install scikit-learn pandas

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression  # Example model
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.datasets import load_iris # Example dataset

# Load a sample dataset (replace with your dataset loading)
# For demonstration, we'll use the Iris dataset
data = load_iris()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = pd.Series(data.target, name='target')

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a sample model (replace with your trained model)
# For demonstration, we'll use Logistic Regression
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# --- Evaluation ---

# Ask user for feature and target names (can be improved for more robust input)
# For this example, we'll assume the user knows the column names or uses the default Iris names
print(f"Available features: {list(X.columns)}")
print(f"Available target: {y.name}")

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted') # Use weighted for multiclass
recall = recall_score(y_test, y_pred, average='weighted')     # Use weighted for multiclass
f1 = f1_score(y_test, y_pred, average='weighted')             # Use weighted for multiclass

# Display metrics
print("\nModel Evaluation Metrics:")
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")
