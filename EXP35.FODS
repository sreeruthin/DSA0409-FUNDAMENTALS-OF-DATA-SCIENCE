

from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42) # for reproducibility
data = {
    'CustomerID': range(1, 101),
    'TotalAmountSpent': np.random.rand(100) * 1000 + 50, # Random spending between 50 and 1050
    'VisitFrequency': np.random.randint(1, 30, 100)  # Random visits between 1 and 30
}
df = pd.DataFrame(data)

# Select the features for clustering
X = df[['TotalAmountSpent', 'VisitFrequency']]

# Determine the optimal number of clusters (optional but recommended)
# Using the elbow method
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 4))
plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

n_clusters = 3

# Apply K-Means clustering
kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10) # Added n_init
df['Cluster'] = kmeans.fit_predict(X)

# Visualize the clusters
plt.figure(figsize=(8, 6))
for cluster_id in range(n_clusters):
    cluster_data = df[df['Cluster'] == cluster_id]
    plt.scatter(cluster_data['TotalAmountSpent'], cluster_data['VisitFrequency'], label=f'Cluster {cluster_id + 1}')

plt.xlabel('Total Amount Spent')
plt.ylabel('Visit Frequency')
plt.title('Customer Segments based on Spending and Frequency')
plt.legend()
plt.grid(True)
plt.show()

# Display the first few rows with the assigned cluster
print(df.head())

# Analyze the characteristics of each cluster
print("\nCluster Centers:")
print(kmeans.cluster_centers_)

print("\nCustomer count per cluster:")
print(df['Cluster'].value_counts().sort_index())

# You can further analyze each cluster by examining the mean/median of the features within each cluster
print("\nCluster Statistics:")
print(df.groupby('Cluster')[['TotalAmountSpent', 'VisitFrequency']].mean())
