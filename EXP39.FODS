

!pip install -q scikit-learn

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Create some dummy transaction data for demonstration
data = {
    'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    'TotalAmount': [150.50, 230.75, 50.20, 400.00, 80.10, 120.30, 350.90, 60.50, 280.00, 180.20, 55.00, 420.75],
    'NumberOfItems': [3, 5, 1, 8, 2, 4, 7, 1, 6, 4, 1, 9]
}
df = pd.DataFrame(data)

# Select the features for clustering
X = df[['TotalAmount', 'NumberOfItems']]

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow method
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42, n_init=10) # Added n_init
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 4))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.show()

# Based on the elbow method, let's choose a number of clusters (e.g., 3)
n_clusters = 3
kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10) # Added n_init
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Visualize the clusters
plt.figure(figsize=(8, 6))
plt.scatter(df['TotalAmount'], df['NumberOfItems'], c=df['Cluster'], cmap='viridis', s=50, alpha=0.7)
plt.title('Customer Segmentation using K-Means')
plt.xlabel('Total Amount Spent')
plt.ylabel('Number of Items Purchased')
plt.colorbar(label='Cluster')
plt.show()

# Display the segmented data
df
